"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parentNode = exports.cellIndexes = exports.domCellAround = exports.getTable = exports.otherResizeHandle = exports.otherResizing = exports.tableRowResizeKey = exports.tableColumnResizeKey = exports.tableResizeKey = exports.setNodeStyle = exports.parseStyle = exports.reAnyValue = void 0;
var tslib_1 = require("tslib");
var prosemirror_state_1 = require("prosemirror-state");
var utils_1 = require("../../utils");
exports.reAnyValue = /^.+$/;
var parseStyle = function (styleText) {
    var styles = (styleText || '').split(/\s*;\s*/).filter(Boolean).map(function (s) {
        var _a;
        var nameValue = s.split(/\s*:\s*/);
        return _a = {}, _a[nameValue[0]] = nameValue[1], _a;
    }).reduce(function (acc, val) { return (tslib_1.__assign(tslib_1.__assign({}, acc), val)); }, {});
    return styles;
};
exports.parseStyle = parseStyle;
function setNodeStyle(nodeAttrs, styleType, value) {
    var attrs;
    if (new RegExp('[^-]?' + styleType + ':').test(nodeAttrs.style || '')) {
        var style = utils_1.changeStylesString(nodeAttrs.style || '', { style: styleType, value: exports.reAnyValue, newValue: value }).style;
        attrs = tslib_1.__assign(tslib_1.__assign({}, nodeAttrs), { style: style });
    }
    else if (nodeAttrs.style) {
        attrs = tslib_1.__assign(tslib_1.__assign({}, nodeAttrs), { style: nodeAttrs.style.replace(/;$/, '') + '; ' + styleType + ': ' + value + ';' });
    }
    else {
        attrs = tslib_1.__assign(tslib_1.__assign({}, nodeAttrs), { style: styleType + ': ' + value + ';' });
    }
    return attrs;
}
exports.setNodeStyle = setNodeStyle;
exports.tableResizeKey = new prosemirror_state_1.PluginKey('table-resize');
exports.tableColumnResizeKey = new prosemirror_state_1.PluginKey('table-column-resizing');
exports.tableRowResizeKey = new prosemirror_state_1.PluginKey('table-row-resizing');
function otherResizing(current, state) {
    var activeResize = false;
    activeResize = activeResize ||
        (current !== exports.tableResizeKey && Boolean(exports.tableResizeKey.get(state)) && exports.tableResizeKey.getState(state).dragging);
    activeResize = activeResize ||
        (current !== exports.tableColumnResizeKey && Boolean(exports.tableColumnResizeKey.get(state)) && exports.tableColumnResizeKey.getState(state).dragging);
    activeResize = activeResize ||
        (current !== exports.tableRowResizeKey && Boolean(exports.tableRowResizeKey.get(state)) && exports.tableRowResizeKey.getState(state).dragging);
    return activeResize;
}
exports.otherResizing = otherResizing;
function otherResizeHandle(current, state) {
    var activeResize = false;
    activeResize = activeResize ||
        (current !== exports.tableColumnResizeKey &&
            Boolean(exports.tableColumnResizeKey.get(state)) &&
            exports.tableColumnResizeKey.getState(state).activeHandle > -1);
    activeResize = activeResize ||
        (current !== exports.tableRowResizeKey && Boolean(exports.tableRowResizeKey.get(state)) && exports.tableRowResizeKey.getState(state).activeHandle > -1);
    return activeResize;
}
exports.otherResizeHandle = otherResizeHandle;
function getTable(dom) {
    if (dom && dom.firstChild && dom.firstChild.nodeName === 'TABLE') {
        return dom.firstChild;
    }
    return dom;
}
exports.getTable = getTable;
function domCellAround(target) {
    while (target && target.nodeName !== 'TD' && target.nodeName !== 'TH') {
        target = target.classList.contains('ProseMirror') ? null : target.parentNode;
    }
    return target;
}
exports.domCellAround = domCellAround;
function cellIndexes(cell) {
    var row = cell.parentNode;
    return {
        cellIndex: cell.cellIndex,
        rowIndex: row.rowIndex
    };
}
exports.cellIndexes = cellIndexes;
function parentNode(pos, predicate) {
    for (var depth = pos.depth; depth > 0; depth--) {
        var node = pos.node(depth);
        if (predicate(node)) {
            return { node: node, depth: depth };
        }
    }
    return null;
}
exports.parentNode = parentNode;
