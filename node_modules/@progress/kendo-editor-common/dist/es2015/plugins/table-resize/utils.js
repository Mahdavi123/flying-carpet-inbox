import { PluginKey } from 'prosemirror-state';
import { changeStylesString } from '../../utils';
export const reAnyValue = /^.+$/;
export const parseStyle = (styleText) => {
    const styles = (styleText || '').split(/\s*;\s*/).filter(Boolean).map(s => {
        const nameValue = s.split(/\s*:\s*/);
        return { [nameValue[0]]: nameValue[1] };
    }).reduce((acc, val) => (Object.assign(Object.assign({}, acc), val)), {});
    return styles;
};
export function setNodeStyle(nodeAttrs, styleType, value) {
    let attrs;
    if (new RegExp('[^-]?' + styleType + ':').test(nodeAttrs.style || '')) {
        const { style } = changeStylesString(nodeAttrs.style || '', { style: styleType, value: reAnyValue, newValue: value });
        attrs = Object.assign(Object.assign({}, nodeAttrs), { style });
    }
    else if (nodeAttrs.style) {
        attrs = Object.assign(Object.assign({}, nodeAttrs), { style: nodeAttrs.style.replace(/;$/, '') + '; ' + styleType + ': ' + value + ';' });
    }
    else {
        attrs = Object.assign(Object.assign({}, nodeAttrs), { style: styleType + ': ' + value + ';' });
    }
    return attrs;
}
export const tableResizeKey = new PluginKey('table-resize');
export const tableColumnResizeKey = new PluginKey('table-column-resizing');
export const tableRowResizeKey = new PluginKey('table-row-resizing');
export function otherResizing(current, state) {
    let activeResize = false;
    activeResize = activeResize ||
        (current !== tableResizeKey && Boolean(tableResizeKey.get(state)) && tableResizeKey.getState(state).dragging);
    activeResize = activeResize ||
        (current !== tableColumnResizeKey && Boolean(tableColumnResizeKey.get(state)) && tableColumnResizeKey.getState(state).dragging);
    activeResize = activeResize ||
        (current !== tableRowResizeKey && Boolean(tableRowResizeKey.get(state)) && tableRowResizeKey.getState(state).dragging);
    return activeResize;
}
export function otherResizeHandle(current, state) {
    let activeResize = false;
    activeResize = activeResize ||
        (current !== tableColumnResizeKey &&
            Boolean(tableColumnResizeKey.get(state)) &&
            tableColumnResizeKey.getState(state).activeHandle > -1);
    activeResize = activeResize ||
        (current !== tableRowResizeKey && Boolean(tableRowResizeKey.get(state)) && tableRowResizeKey.getState(state).activeHandle > -1);
    return activeResize;
}
export function getTable(dom) {
    if (dom && dom.firstChild && dom.firstChild.nodeName === 'TABLE') {
        return dom.firstChild;
    }
    return dom;
}
export function domCellAround(target) {
    while (target && target.nodeName !== 'TD' && target.nodeName !== 'TH') {
        target = target.classList.contains('ProseMirror') ? null : target.parentNode;
    }
    return target;
}
export function cellIndexes(cell) {
    const row = cell.parentNode;
    return {
        cellIndex: cell.cellIndex,
        rowIndex: row.rowIndex
    };
}
export function parentNode(pos, predicate) {
    for (let depth = pos.depth; depth > 0; depth--) {
        let node = pos.node(depth);
        if (predicate(node)) {
            return { node, depth };
        }
    }
    return null;
}
