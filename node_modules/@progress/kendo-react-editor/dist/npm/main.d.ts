import { Editor } from './Editor';
import { EditorProps, EditorMountEvent, EditorPasteEvent, EditorChangeEvent, EditorExecuteEvent, EditorFocusEvent, EditorBlurEvent } from './EditorProps';
import { EditorTools } from './tools/main';
import { EditorToolsSettings } from './config/toolsSettings';
import { EditorUtils } from './utils';
import { EditorDialogs } from './dialogs/main';
import { Selection, SelectionRange, TextSelection, NodeSelection, AllSelection, EditorState, Plugin, PluginKey, Transaction, Decoration, DecorationSet, EditorView, Node, ResolvedPos, NodeRange, Fragment, Slice, ReplaceError, Mark, MarkSpec, Schema, NodeType, NodeSpec, MarkType, ContentMatch, DOMParser, DOMSerializer, Transform, Step, StepResult, joinPoint, canJoin, canSplit, insertPoint, dropPoint, liftTarget, findWrapping, StepMap, MapResult, Mapping, AddMarkStep, RemoveMarkStep, ReplaceStep, ReplaceAroundStep, replaceStep, wrapIn, setBlockType, toggleMark, autoJoin, chainCommands, history, undoDepth, redoDepth, InputRule, inputRules, wrappingInputRule, textblockTypeInputRule, keymap, keydownHandler, addListNodes, wrapInList, splitListItem, liftListItem, sinkListItem, dropCursor, gapCursor, tableEditing, fixTables, cellAround, isInTable, selectionCell, moveCellForward, inSameTable, findCell, colCount, nextCell, removeColSpan, addColSpan, columnIsHeader, tableNodes, tableNodeTypes, CellSelection, TableMap, columnResizing, updateColumnsOnResize, selectedRect, addColumn, addColumnBefore, addColumnAfter, deleteColumn, rowIsHeader, addRow, deleteRow, mergeCells, splitCell, splitCellWithType, setCellAttr, toggleHeader, toggleHeaderRow, toggleHeaderColumn, toggleHeaderCell, goToNextCell, deleteTable } from '@progress/kendo-editor-common';
export { Shortcuts } from './config/shortcuts';
export { PasteCleanupSettings } from './config/pasteSettings';
/**
 * An object containing the content of ProseMirror packages used at the Editor component.
 *
 * "prosemirror-state",
 * "prosemirror-view",
 * "prosemirror-model",
 * "prosemirror-transform",
 * "prosemirror-commands",
 * "prosemirror-keymap",
 * "prosemirror-tables",
 * "prosemirror-schema-list",
 * "prosemirror-history",
 * "prosemirror-inputrules",
 * "prosemirror-dropcursor",
 * "prosemirror-gapcursor"
 */
export declare const ProseMirror: {
    Selection: typeof Selection;
    SelectionRange: typeof SelectionRange;
    TextSelection: typeof TextSelection;
    NodeSelection: typeof NodeSelection;
    AllSelection: typeof AllSelection;
    EditorState: typeof EditorState;
    Plugin: typeof Plugin;
    PluginKey: typeof PluginKey;
    Transaction: typeof Transaction;
    Decoration: typeof Decoration;
    DecorationSet: typeof DecorationSet;
    EditorView: typeof EditorView;
    Node: typeof Node;
    ResolvedPos: typeof ResolvedPos;
    NodeRange: typeof NodeRange;
    Fragment: typeof Fragment;
    Slice: typeof Slice;
    ReplaceError: typeof ReplaceError;
    Mark: typeof Mark;
    Schema: typeof Schema;
    NodeType: typeof NodeType;
    MarkType: typeof MarkType;
    ContentMatch: typeof ContentMatch;
    DOMParser: typeof DOMParser;
    DOMSerializer: typeof DOMSerializer;
    Transform: typeof Transform;
    Step: typeof Step;
    StepResult: typeof StepResult;
    joinPoint: typeof joinPoint;
    canJoin: typeof canJoin;
    canSplit: typeof canSplit;
    insertPoint: typeof insertPoint;
    dropPoint: typeof dropPoint;
    liftTarget: typeof liftTarget;
    findWrapping: typeof findWrapping;
    StepMap: typeof StepMap;
    MapResult: typeof MapResult;
    Mapping: typeof Mapping;
    AddMarkStep: typeof AddMarkStep;
    RemoveMarkStep: typeof RemoveMarkStep;
    ReplaceStep: typeof ReplaceStep;
    ReplaceAroundStep: typeof ReplaceAroundStep;
    replaceStep: typeof replaceStep;
    deleteSelection: import("prosemirror-state").Command;
    joinBackward: import("prosemirror-state").Command;
    selectNodeBackward: import("prosemirror-state").Command;
    joinForward: import("prosemirror-state").Command;
    selectNodeForward: import("prosemirror-state").Command;
    joinUp: import("prosemirror-state").Command;
    joinDown: import("prosemirror-state").Command;
    lift: import("prosemirror-state").Command;
    newlineInCode: import("prosemirror-state").Command;
    exitCode: import("prosemirror-state").Command;
    createParagraphNear: import("prosemirror-state").Command;
    liftEmptyBlock: import("prosemirror-state").Command;
    splitBlock: import("prosemirror-state").Command;
    splitBlockKeepMarks: import("prosemirror-state").Command;
    selectParentNode: import("prosemirror-state").Command;
    selectAll: import("prosemirror-state").Command;
    wrapIn: typeof wrapIn;
    setBlockType: typeof setBlockType;
    toggleMark: typeof toggleMark;
    autoJoin: typeof autoJoin;
    chainCommands: typeof chainCommands;
    pcBaseKeymap: {
        [key: string]: import("prosemirror-state").Command;
    };
    macBaseKeymap: {
        [key: string]: import("prosemirror-state").Command;
    };
    baseKeymap: {
        [key: string]: import("prosemirror-state").Command;
    };
    history: typeof history;
    undo: import("prosemirror-state").Command;
    redo: import("prosemirror-state").Command;
    undoDepth: typeof undoDepth;
    redoDepth: typeof redoDepth;
    InputRule: typeof InputRule;
    inputRules: typeof inputRules;
    undoInputRule: import("prosemirror-state").Command;
    emDash: InputRule;
    ellipsis: InputRule;
    openDoubleQuote: InputRule;
    closeDoubleQuote: InputRule;
    openSingleQuote: InputRule;
    closeSingleQuote: InputRule;
    smartQuotes: readonly InputRule[];
    wrappingInputRule: typeof wrappingInputRule;
    textblockTypeInputRule: typeof textblockTypeInputRule;
    keymap: typeof keymap;
    keydownHandler: typeof keydownHandler;
    orderedList: NodeSpec;
    bulletList: NodeSpec;
    listItem: NodeSpec;
    addListNodes: typeof addListNodes;
    wrapInList: typeof wrapInList;
    splitListItem: typeof splitListItem;
    liftListItem: typeof liftListItem;
    sinkListItem: typeof sinkListItem;
    dropCursor: typeof dropCursor;
    gapCursor: typeof gapCursor;
    tableEditing: typeof tableEditing;
    fixTables: typeof fixTables;
    fixTablesKey: PluginKey<any>;
    cellAround: typeof cellAround;
    isInTable: typeof isInTable;
    selectionCell: typeof selectionCell;
    moveCellForward: typeof moveCellForward;
    inSameTable: typeof inSameTable;
    findCell: typeof findCell;
    colCount: typeof colCount;
    nextCell: typeof nextCell;
    removeColSpan: typeof removeColSpan;
    addColSpan: typeof addColSpan;
    columnIsHeader: typeof columnIsHeader;
    tableNodes: typeof tableNodes;
    tableNodeTypes: typeof tableNodeTypes;
    CellSelection: typeof CellSelection;
    TableMap: typeof TableMap;
    tableEditingKey: PluginKey<any>;
    columnResizing: typeof columnResizing;
    columnResizingPluginKey: PluginKey<any>;
    updateColumnsOnResize: typeof updateColumnsOnResize;
    selectedRect: typeof selectedRect;
    addColumn: typeof addColumn;
    addColumnBefore: typeof addColumnBefore;
    addColumnAfter: typeof addColumnAfter;
    deleteColumn: typeof deleteColumn;
    rowIsHeader: typeof rowIsHeader;
    addRow: typeof addRow;
    addRowBefore: (state: EditorState, dispatch?: ((tr: Transaction) => void) | undefined) => boolean;
    addRowAfter: (state: EditorState, dispatch?: ((tr: Transaction) => void) | undefined) => boolean;
    deleteRow: typeof deleteRow;
    mergeCells: typeof mergeCells;
    splitCell: typeof splitCell;
    splitCellWithType: typeof splitCellWithType;
    setCellAttr: typeof setCellAttr;
    toggleHeader: typeof toggleHeader;
    toggleHeaderRow: typeof toggleHeaderRow;
    toggleHeaderColumn: typeof toggleHeaderColumn;
    toggleHeaderCell: typeof toggleHeaderCell;
    goToNextCell: typeof goToNextCell;
    deleteTable: typeof deleteTable;
};
export { Editor, EditorProps, EditorMountEvent, EditorPasteEvent, EditorChangeEvent, EditorExecuteEvent, EditorFocusEvent, EditorBlurEvent, EditorTools, EditorToolsSettings, EditorUtils, EditorDialogs, NodeSpec, MarkSpec };
