{"ast":null,"code":"import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\n// apicore\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore'; // helpers\n\nimport { login as loginApi, logout as logoutApi, signup as signupApi, forgotPassword as forgotPasswordApi } from '../../helpers/'; // actions\n\nimport { authApiResponseSuccess, authApiResponseError } from './actions'; // constants\n\nimport { AuthActionTypes } from './constants';\nconst api = new APICore();\n/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */\n\nfunction* login({\n  payload: {\n    email,\n    password\n  },\n  type\n}) {\n  try {\n    const response = yield call(loginApi, {\n      email,\n      password\n    });\n    const user = response.data; // NOTE - You can change this according to response format from your api\n\n    api.setLoggedInUser(user);\n    setAuthorization(user['token']);\n    yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, user));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\n    api.setLoggedInUser(null);\n    setAuthorization(null);\n  }\n}\n/**\r\n * Logout the user\r\n */\n\n\nfunction* logout() {\n  try {\n    yield call(logoutApi);\n    api.setLoggedInUser(null);\n    setAuthorization(null);\n    yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\n  }\n}\n\nfunction* signup({\n  payload: {\n    fullname,\n    email,\n    password\n  }\n}) {\n  try {\n    const response = yield call(signupApi, {\n      fullname,\n      email,\n      password\n    });\n    const user = response.data; // api.setLoggedInUser(user);\n    // setAuthorization(user['token']);\n\n    yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\n    api.setLoggedInUser(null);\n    setAuthorization(null);\n  }\n}\n\nfunction* forgotPassword({\n  payload: {\n    email\n  }\n}) {\n  try {\n    const response = yield call(forgotPasswordApi, {\n      email\n    });\n    yield put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD, response.data));\n  } catch (error) {\n    yield put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD, error));\n  }\n}\n\nexport function* watchLoginUser() {\n  yield takeEvery(AuthActionTypes.LOGIN_USER, login);\n}\nexport function* watchLogout() {\n  yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\n}\nexport function* watchSignup() {\n  yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\n}\nexport function* watchForgotPassword() {\n  yield takeEvery(AuthActionTypes.FORGOT_PASSWORD, forgotPassword);\n}\n\nfunction* authSaga() {\n  yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchForgotPassword)]);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:/workspace/flying-assess/flyingcarpet-shared-inbox/src/redux/auth/saga.ts"],"names":["all","fork","put","takeEvery","call","APICore","setAuthorization","login","loginApi","logout","logoutApi","signup","signupApi","forgotPassword","forgotPasswordApi","authApiResponseSuccess","authApiResponseError","AuthActionTypes","api","payload","email","password","type","response","user","data","setLoggedInUser","LOGIN_USER","error","LOGOUT_USER","fullname","SIGNUP_USER","FORGOT_PASSWORD","watchLoginUser","watchLogout","watchSignup","watchForgotPassword","authSaga"],"mappings":"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","sourcesContent":["import { all, fork, put, takeEvery, call } from 'redux-saga/effects';\r\nimport { SagaIterator } from '@redux-saga/core';\r\n\r\n// apicore\r\nimport { APICore, setAuthorization } from '../../helpers/api/apiCore';\r\n\r\n// helpers\r\nimport {\r\n    login as loginApi,\r\n    logout as logoutApi,\r\n    signup as signupApi,\r\n    forgotPassword as forgotPasswordApi,\r\n} from '../../helpers/';\r\n\r\n// actions\r\nimport { authApiResponseSuccess, authApiResponseError } from './actions';\r\n\r\n// constants\r\nimport { AuthActionTypes } from './constants';\r\n\r\ninterface UserData {\r\n    payload: {\r\n        username: string;\r\n        password: string;\r\n        fullname: string;\r\n        email: string;\r\n    };\r\n    type: string;\r\n}\r\n\r\nconst api = new APICore();\r\n\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password\r\n */\r\nfunction* login({ payload: { email, password }, type }: UserData): SagaIterator {\r\n    try {\r\n        const response = yield call(loginApi, { email, password });\r\n        const user = response.data;\r\n        // NOTE - You can change this according to response format from your api\r\n        api.setLoggedInUser(user);\r\n        setAuthorization(user['token']);\r\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGIN_USER, user));\r\n    } catch (error: any) {\r\n        yield put(authApiResponseError(AuthActionTypes.LOGIN_USER, error));\r\n        api.setLoggedInUser(null);\r\n        setAuthorization(null);\r\n    }\r\n}\r\n\r\n/**\r\n * Logout the user\r\n */\r\nfunction* logout(): SagaIterator {\r\n    try {\r\n        yield call(logoutApi);\r\n        api.setLoggedInUser(null);\r\n        setAuthorization(null);\r\n        yield put(authApiResponseSuccess(AuthActionTypes.LOGOUT_USER, {}));\r\n    } catch (error: any) {\r\n        yield put(authApiResponseError(AuthActionTypes.LOGOUT_USER, error));\r\n    }\r\n}\r\n\r\nfunction* signup({ payload: { fullname, email, password } }: UserData): SagaIterator {\r\n    try {\r\n        const response = yield call(signupApi, { fullname, email, password });\r\n        const user = response.data;\r\n        // api.setLoggedInUser(user);\r\n        // setAuthorization(user['token']);\r\n        yield put(authApiResponseSuccess(AuthActionTypes.SIGNUP_USER, user));\r\n    } catch (error: any) {\r\n        yield put(authApiResponseError(AuthActionTypes.SIGNUP_USER, error));\r\n        api.setLoggedInUser(null);\r\n        setAuthorization(null);\r\n    }\r\n}\r\n\r\nfunction* forgotPassword({ payload: { email } }: UserData): SagaIterator {\r\n    try {\r\n        const response = yield call(forgotPasswordApi, { email });\r\n        yield put(authApiResponseSuccess(AuthActionTypes.FORGOT_PASSWORD, response.data));\r\n    } catch (error: any) {\r\n        yield put(authApiResponseError(AuthActionTypes.FORGOT_PASSWORD, error));\r\n    }\r\n}\r\nexport function* watchLoginUser() {\r\n    yield takeEvery(AuthActionTypes.LOGIN_USER, login);\r\n}\r\n\r\nexport function* watchLogout() {\r\n    yield takeEvery(AuthActionTypes.LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchSignup(): any {\r\n    yield takeEvery(AuthActionTypes.SIGNUP_USER, signup);\r\n}\r\n\r\nexport function* watchForgotPassword(): any {\r\n    yield takeEvery(AuthActionTypes.FORGOT_PASSWORD, forgotPassword);\r\n}\r\n\r\nfunction* authSaga() {\r\n    yield all([fork(watchLoginUser), fork(watchLogout), fork(watchSignup), fork(watchForgotPassword)]);\r\n}\r\n\r\nexport default authSaga;\r\n"]},"metadata":{},"sourceType":"module"}