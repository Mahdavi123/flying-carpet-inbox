{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\flying-assess\\\\flyingcarpet-shared-inbox\\\\src\\\\routes\\\\PrivateRoute.tsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { APICore } from '../helpers/api/apiCore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\r\n * Private Route forces the authorization before the route can be accessed\r\n * @param {*} param0\r\n * @returns\r\n */\nconst PrivateRoute = ({\n  component: Component,\n  roles,\n  ...rest\n}) => {\n  const api = new APICore();\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => {\n      if (api.isUserAuthenticated() === false) {\n        // not logged in so redirect to login page with the return url\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/auth/login',\n            state: {\n              from: props['location']\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 25\n        }, this);\n      }\n\n      const loggedInUser = api.getLoggedInUser(); // check if route is restricted by role\n\n      if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: '/'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 28\n        }, this);\n      } // authorised so return component\n\n\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 24\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["D:/workspace/flying-assess/flyingcarpet-shared-inbox/src/routes/PrivateRoute.tsx"],"names":["React","Route","Redirect","APICore","PrivateRoute","component","Component","roles","rest","api","props","isUserAuthenticated","pathname","state","from","loggedInUser","getLoggedInUser","indexOf","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAiE,kBAAjE;AAEA,SAASC,OAAT,QAAwB,wBAAxB;;;AAOA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,KAAxB;AAA+B,KAAGC;AAAlC,CAAD,KAAiE;AAClF,QAAMC,GAAG,GAAG,IAAIN,OAAJ,EAAZ;AAEA,sBACI,QAAC,KAAD,OACQK,IADR;AAEI,IAAA,MAAM,EAAGE,KAAD,IAAgC;AACpC,UAAID,GAAG,CAACE,mBAAJ,OAA8B,KAAlC,EAAyC;AACrC;AACA,4BACI,QAAC,QAAD;AACI,UAAA,EAAE,EAAE;AACAC,YAAAA,QAAQ,EAAE,aADV;AAEAC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEJ,KAAK,CAAC,UAAD;AAAb;AAFP;AADR;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH;;AAED,YAAMK,YAAY,GAAGN,GAAG,CAACO,eAAJ,EAArB,CAboC,CAepC;;AACA,UAAIT,KAAK,IAAIA,KAAK,CAACU,OAAN,CAAcF,YAAY,CAACG,IAA3B,MAAqC,CAAC,CAAnD,EAAsD;AAClD;AACA,4BAAO,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEN,YAAAA,QAAQ,EAAE;AAAZ;AAAd;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAnBmC,CAoBpC;;;AACA,0BAAO,QAAC,SAAD,OAAeF;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AAxBL;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CA/BD;;KAAMN,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect, RouteProps, RouteComponentProps } from 'react-router-dom';\r\n\r\nimport { APICore } from '../helpers/api/apiCore';\r\n\r\ninterface PrivateRouteProps {\r\n    component: React.FunctionComponent<RouteProps>;\r\n    roles?: string;\r\n}\r\n\r\n/**\r\n * Private Route forces the authorization before the route can be accessed\r\n * @param {*} param0\r\n * @returns\r\n */\r\nconst PrivateRoute = ({ component: Component, roles, ...rest }: PrivateRouteProps) => {\r\n    const api = new APICore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props: RouteComponentProps) => {\r\n                if (api.isUserAuthenticated() === false) {\r\n                    // not logged in so redirect to login page with the return url\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: '/auth/login',\r\n                                state: { from: props['location'] },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                const loggedInUser = api.getLoggedInUser();\r\n\r\n                // check if route is restricted by role\r\n                if (roles && roles.indexOf(loggedInUser.role) === -1) {\r\n                    // role not authorised so redirect to home page\r\n                    return <Redirect to={{ pathname: '/' }} />;\r\n                }\r\n                // authorised so return component\r\n                return <Component {...props} />;\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default PrivateRoute;\r\n"]},"metadata":{},"sourceType":"module"}