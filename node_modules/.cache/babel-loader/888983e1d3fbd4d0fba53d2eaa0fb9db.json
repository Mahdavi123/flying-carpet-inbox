{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\flyingcarpet\\\\flyingcarpet-shared-inbox\\\\src\\\\pages\\\\apps\\\\Chat\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { API_Key } from '../../../config/index'; // components\n\nimport PageTitle from '../../../components/PageTitle';\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea'; // dummy data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// ChatApp\nconst ChatApp = () => {\n  _s();\n\n  const [selectedUser, setSelectedUser] = useState({});\n  const [admin, setadmin] = useState({});\n  const [USER, setUSER] = useState([]);\n  const [user, setUser] = useState([]);\n  /**\n   * On user change\n   */\n\n  const onUserChange = user => {\n    setSelectedUser(user);\n  };\n\n  useEffect(() => {\n    getMe();\n    getUsers();\n  }, []);\n  useEffect(() => {\n    setSelectedUser(user[0]);\n  }, [user]);\n\n  const getMe = () => {\n    const fetchemailurl = `https://api.chat-api.com/instance${API_Key.instance}/me?token=${API_Key.token}`;\n    fetch(fetchemailurl).then(res => res.json()).then(json => {\n      console.log(json);\n      let user = {\n        id: json.phone,\n        name: json.phone,\n        userStatus: \"online\",\n        avatar: json.photo\n      };\n      setadmin(user);\n    });\n  };\n\n  const getUsers = () => {\n    const fetchemailurl = `https://api.chat-api.com/instance${API_Key.instance}/messages?token=${API_Key.token}`;\n    fetch(fetchemailurl).then(res => res.json()).then(json => {\n      const total = [...json.messages];\n      let userdata = [];\n      let tempdata = [];\n      total.sort((a, b) => b.time - a.time);\n\n      for (let i = 0; i < total.length; i++) {\n        if (tempdata.indexOf(total[i]['chatId']) == -1) {\n          tempdata.push(total[i]['chatId']);\n          let lastMessage;\n\n          if (total[i]['type'] != \"chat\") {\n            lastMessage = \"Attached file\";\n          } else {\n            lastMessage = total[i].body.slice(0, 20);\n          }\n\n          const time = total[i].time;\n          const timedate = new Date(time * 1000);\n          let hour = timedate.getHours();\n          let min = timedate.getMinutes();\n          let tmp = \" AM\";\n\n          if (hour > 12) {\n            hour -= 12;\n            tmp = \" PM\";\n          }\n\n          let user = {\n            id: total[i]['chatName'],\n            avatar: \"\",\n            name: total[i]['senderName'],\n            userStatus: \"online\",\n            lastMessage: lastMessage,\n            lastMessageOn: hour + \":\" + min + tmp\n          };\n\n          if (total[i]['fromMe'] == 1) {\n            user.name = total[i]['chatId'];\n          }\n\n          userdata.push(user);\n        }\n      } //set lastmess\n      // for (let i = 0; i < userdata.length; i++) {\n      //     const temp = [...total.filter((item) => item.fromMe != 1 && item.chatName == userdata[i]['id'])];\n      //     if (temp.length > 0) {\n      //         if (temp[0]['type'] != \"chat\") {\n      //             userdata[i]['lastMessage'] = \"Attached file\";  \n      //         }else{\n      //             userdata[i]['lastMessage'] = temp[0].body;\n      //         }\n      //         const time = temp[0].time;\n      //         console.log(temp[0]);\n      //         const timedate = new Date(time*1000);\n      //         let hour = timedate.getHours();\n      //         let min = timedate.getMinutes();\n      //         let tmp = \" AM\";\n      //         if (hour > 12) {\n      //             hour -= 12;\n      //             tmp = \" PM\";\n      //         }\n      //         userdata[i]['lastMessageOn'] = hour + \":\"+min +tmp;\n      //     }\n      // }\n\n\n      setUSER(userdata);\n      setUser(userdata);\n    });\n  };\n\n  const search = text => {\n    console.log(text);\n    setUser(text ? [...USER].filter(u => u.name.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...USER]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      breadCrumbItems: [// { label: 'Apps', path: '/apps/chat' },\n        // { label: 'Chat', path: '/apps/chat', active: true },\n      ],\n      title: 'Chat'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: 5,\n        xxl: 3,\n        children: /*#__PURE__*/_jsxDEV(ChatUsers, {\n          admin: admin,\n          user: user,\n          onUserSelect: onUserChange,\n          onSearch: search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 7,\n        xxl: 9,\n        children: /*#__PURE__*/_jsxDEV(ChatArea, {\n          selectedUser: selectedUser,\n          setUser: setUser,\n          user: user,\n          admin: admin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatApp, \"Xq+pBzH2/1k8Rzw4QbC8Nn5JmXc=\");\n\n_c = ChatApp;\nexport default ChatApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"sources":["D:/workspace/flyingcarpet/flyingcarpet-shared-inbox/src/pages/apps/Chat/index.tsx"],"names":["React","useEffect","useState","Row","Col","API_Key","PageTitle","ChatUsers","ChatArea","ChatApp","selectedUser","setSelectedUser","admin","setadmin","USER","setUSER","user","setUser","onUserChange","getMe","getUsers","fetchemailurl","instance","token","fetch","then","res","json","console","log","id","phone","name","userStatus","avatar","photo","total","messages","userdata","tempdata","sort","a","b","time","i","length","indexOf","push","lastMessage","body","slice","timedate","Date","hour","getHours","min","getMinutes","tmp","lastMessageOn","search","text","filter","u","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport { API_Key } from '../../../config/index';\n\n// components\nimport PageTitle from '../../../components/PageTitle';\n\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea';\n// dummy data\nimport { USERS, ChatUserType } from './data';\n\n// ChatApp\nconst ChatApp = () => {\n    const [selectedUser, setSelectedUser] = useState<ChatUserType>({});\n    const [admin,setadmin] = useState<ChatUserType>({});\n    const [USER,setUSER] = useState<ChatUserType[]>([]);\n    const [user, setUser] = useState<ChatUserType[]>([]);\n\n    \n    /**\n     * On user change\n     */\n    const onUserChange = (user: ChatUserType) => {\n        setSelectedUser(user);\n    };\n\n    useEffect(() => {\n        getMe();\n        getUsers();\n    },[])\n\n    useEffect(() => {\n        setSelectedUser(user[0])\n\n    },[user])\n\n    const getMe = () => {\n        const fetchemailurl = `https://api.chat-api.com/instance${API_Key.instance}/me?token=${API_Key.token}`;\n        fetch(fetchemailurl)\n            .then((res) => res.json())\n            .then((json) => {\n                console.log(json);\n                let user : ChatUserType = {\n                    id : json.phone,\n                    name : json.phone,\n                    userStatus : \"online\",\n                    avatar : json.photo\n                }\n                setadmin(user);\n            })\n    }\n\n    const getUsers = () => {\n        const fetchemailurl = `https://api.chat-api.com/instance${API_Key.instance}/messages?token=${API_Key.token}`;\n        fetch(fetchemailurl)\n        .then((res)=> res.json())\n        .then((json)=>{\n            const total = [...json.messages];\n            let userdata : ChatUserType[] = [];\n            let tempdata = [];\n            total.sort((a : any, b : any) => b.time - a.time);\n            for (let i = 0; i < total.length; i++) {\n                if (tempdata.indexOf(total[i]['chatId']) == -1) {\n                    tempdata.push(total[i]['chatId']);\n                    let lastMessage;\n                    if (total[i]['type'] != \"chat\") {\n                        lastMessage = \"Attached file\";  \n                    }else{\n                        lastMessage = total[i].body.slice(0,20);\n                    }\n                    const time = total[i].time;\n                    const timedate = new Date(time*1000);\n                    let hour = timedate.getHours();\n                    let min = timedate.getMinutes();\n                    let tmp = \" AM\";\n                    if (hour > 12) {\n                        hour -= 12;\n                        tmp = \" PM\";\n                    }\n\n                    let user : ChatUserType = {\n                        id : total[i]['chatName'],\n                        avatar : \"\",\n                        name : total[i]['senderName'],\n                        userStatus : \"online\",\n                        lastMessage : lastMessage,\n                        lastMessageOn : hour + \":\"+min +tmp\n                    };\n                    if (total[i]['fromMe'] == 1) {\n                        user.name = total[i]['chatId'];\n                    }\n                    userdata.push(user)\n                }\n            }\n            //set lastmess\n            // for (let i = 0; i < userdata.length; i++) {\n            //     const temp = [...total.filter((item) => item.fromMe != 1 && item.chatName == userdata[i]['id'])];\n            //     if (temp.length > 0) {\n            //         if (temp[0]['type'] != \"chat\") {\n            //             userdata[i]['lastMessage'] = \"Attached file\";  \n            //         }else{\n            //             userdata[i]['lastMessage'] = temp[0].body;\n            //         }\n            //         const time = temp[0].time;\n            //         console.log(temp[0]);\n            //         const timedate = new Date(time*1000);\n            //         let hour = timedate.getHours();\n            //         let min = timedate.getMinutes();\n            //         let tmp = \" AM\";\n            //         if (hour > 12) {\n            //             hour -= 12;\n            //             tmp = \" PM\";\n            //         }\n            //         userdata[i]['lastMessageOn'] = hour + \":\"+min +tmp;\n            //     }\n            // }\n\n            setUSER(userdata);\n            setUser(userdata);\n        })\n    }\n\n    const search = (text: string) => {\n        console.log(text);\n        setUser(text ? [...USER].filter((u) => u.name!.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...USER]);\n    };\n\n    return (\n        <>\n            <PageTitle\n                breadCrumbItems={[\n                    // { label: 'Apps', path: '/apps/chat' },\n                    // { label: 'Chat', path: '/apps/chat', active: true },\n                ]}\n                title={'Chat'}\n            />\n\n            <Row>\n                <Col lg={5} xxl={3}>\n                    <ChatUsers admin={admin} user={user} onUserSelect={onUserChange} onSearch = {search}/>\n                </Col>\n                <Col lg={7} xxl={9}>\n                    <ChatArea selectedUser={selectedUser} setUser={setUser} user={user} admin={admin}/>\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default ChatApp;\n"]},"metadata":{},"sourceType":"module"}