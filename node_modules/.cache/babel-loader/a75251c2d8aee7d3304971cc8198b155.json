{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\flying-assess\\\\flyingcarpet-shared-inbox\\\\src\\\\pages\\\\apps\\\\Chat\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap'; // components\n\nimport PageTitle from '../../../components/PageTitle';\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea'; // dummy data\n\nimport { USERS } from './data';\nimport avatar1 from '../../../assets/images/users/avatar-1.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\n// ChatApp\nconst ChatApp = () => {\n  _s();\n\n  const [selectedUser, setSelectedUser] = useState(USERS[1]);\n  const [emailList, setEmailList] = useState();\n  /**\r\n   * On user change\r\n   */\n\n  const onUserChange = user => {\n    setSelectedUser(user);\n  };\n\n  const token = \"3px6cypvje3xsjmc\";\n  const instance = \"7827\";\n  /**\r\n   * get emails from your whatsapp\r\n   */\n\n  const fetchemailurl = \"https://api.chat-api.com/instance7827/messages?token=3px6cypvje3xsjmc\";\n  const [userdata, setUserdata] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    fetch(fetchemailurl).then(res => res.json()).then(json => {\n      let total = json.messages;\n      let tempdata = [];\n      const users = [];\n\n      for (let i = 0; i < total.length; i++) {\n        if (tempdata.indexOf(total[i]['chatId']) == -1) {\n          tempdata.push(total[i]['chatId']);\n          users.push({\n            id: i,\n            name: 'Name',\n            avatar: avatar1,\n            lastMessage: 'this is last message',\n            totalUnread: 3,\n            lastMessageOn: 'hello',\n            userStatus: 'online'\n          });\n        }\n      }\n\n      console.log(userdata);\n      setUserdata(users); // setSelectedUser(userdata);\n      // let display =  total.slice(startIndex - 1, endIndex);\n      // console.log(display,startIndex - 1,endIndex );\n      // setEmailList([...display]);\n      // setotherEmails([...total]);\n      // settotalEmails(total.length);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageTitle, {\n      breadCrumbItems: [{\n        label: 'Apps',\n        path: '/apps/chat'\n      }, {\n        label: 'Chat',\n        path: '/apps/chat',\n        active: true\n      }],\n      title: 'Chat'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        lg: 5,\n        xxl: 3,\n        children: /*#__PURE__*/_jsxDEV(ChatUsers, {\n          onUserSelect: onUserChange,\n          userdata: userdata\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        lg: 7,\n        xxl: 9,\n        children: /*#__PURE__*/_jsxDEV(ChatArea, {\n          selectedUser: selectedUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChatApp, \"eXicQ7lEXPpN+kptnIJCteiaNVY=\");\n\n_c = ChatApp;\nexport default ChatApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatApp\");","map":{"version":3,"sources":["D:/workspace/flying-assess/flyingcarpet-shared-inbox/src/pages/apps/Chat/index.tsx"],"names":["React","useState","useEffect","Row","Col","PageTitle","ChatUsers","ChatArea","USERS","avatar1","ChatApp","selectedUser","setSelectedUser","emailList","setEmailList","onUserChange","user","token","instance","fetchemailurl","userdata","setUserdata","fetchData","fetch","then","res","json","total","messages","tempdata","users","i","length","indexOf","push","id","name","avatar","lastMessage","totalUnread","lastMessageOn","userStatus","console","log","label","path","active"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\n// components\r\nimport PageTitle from '../../../components/PageTitle';\r\n\r\nimport ChatUsers from './ChatUsers';\r\nimport ChatArea from './ChatArea';\r\n// dummy data\r\nimport { USERS, ChatUserType } from './data';\r\nimport avatar1 from '../../../assets/images/users/avatar-1.jpg';\r\ninterface EmailItems {\r\n    author: string,\r\n    body: string,\r\n    caption: string,\r\n    chatId: string,\r\n    chatName: string,\r\n    fromMe: number\r\n    id: string,\r\n    isForwarded: number\r\n    messageNumber: number,\r\n    meta: string\r\n    quotedMsgId: string,\r\n    self: number,\r\n    senderName: string,\r\n    time: number\r\n    type: string\r\n}\r\n// ChatApp\r\nconst ChatApp = () => {\r\n    const [selectedUser, setSelectedUser] = useState<ChatUserType>(USERS[1]);\r\n    const [emailList, setEmailList] = useState<EmailItems[]>();\r\n    /**\r\n     * On user change\r\n     */\r\n    const onUserChange = (user: ChatUserType) => {\r\n        setSelectedUser(user);\r\n    };\r\n    const token = \"3px6cypvje3xsjmc\";\r\n    const instance = \"7827\";\r\n    /**\r\n     * get emails from your whatsapp\r\n     */\r\n    const fetchemailurl = \"https://api.chat-api.com/instance7827/messages?token=3px6cypvje3xsjmc\";\r\n   \r\n    const [userdata, setUserdata] = useState<ChatUserType[]>([]);\r\n    useEffect(() => {\r\n        fetchData()\r\n    },[])\r\n    const fetchData = () => {\r\n        fetch(fetchemailurl)\r\n        .then((res)=> res.json())\r\n        .then((json)=>{\r\n            let total = json.messages;\r\n            let tempdata = [];\r\n            const users = [];\r\n\r\n            for (let i = 0; i < total.length; i++) {\r\n                if (tempdata.indexOf(total[i]['chatId']) == -1) {\r\n                    tempdata.push(total[i]['chatId']);\r\n                    users.push({\r\n                        id : i,\r\n                        name: 'Name',\r\n                        avatar: avatar1,\r\n                        lastMessage: 'this is last message',\r\n                        totalUnread: 3,\r\n                        lastMessageOn: 'hello',\r\n                        userStatus: 'online',\r\n                    });\r\n                }\r\n            }\r\n\r\n            console.log(userdata);\r\n\r\n            setUserdata(users);\r\n            // setSelectedUser(userdata);\r\n            // let display =  total.slice(startIndex - 1, endIndex);\r\n            // console.log(display,startIndex - 1,endIndex );\r\n            // setEmailList([...display]);\r\n            // setotherEmails([...total]);\r\n            // settotalEmails(total.length);\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <PageTitle\r\n                breadCrumbItems={[\r\n                    { label: 'Apps', path: '/apps/chat' },\r\n                    { label: 'Chat', path: '/apps/chat', active: true },\r\n                ]}\r\n                title={'Chat'}\r\n            />\r\n\r\n            <Row>\r\n                <Col lg={5} xxl={3}>\r\n                    <ChatUsers onUserSelect={onUserChange} userdata={userdata} />\r\n                </Col>\r\n                <Col lg={7} xxl={9}>\r\n                    <ChatArea selectedUser={selectedUser} />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatApp;\r\n"]},"metadata":{},"sourceType":"module"}