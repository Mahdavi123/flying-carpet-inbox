{"ast":null,"code":"// apicore\nimport { APICore } from '../../helpers/api/apiCore'; // constants\n\nimport { AuthActionTypes } from './constants';\nconst api = new APICore();\nconst INIT_STATE = {\n  user: api.getLoggedInUser(),\n  loading: false\n};\n\nconst Auth = (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case AuthActionTypes.API_RESPONSE_SUCCESS:\n      switch (action.payload.actionType) {\n        case AuthActionTypes.LOGIN_USER:\n          {\n            return { ...state,\n              user: action.payload.data,\n              userLoggedIn: true,\n              loading: false\n            };\n          }\n\n        case AuthActionTypes.SIGNUP_USER:\n          {\n            return { ...state,\n              loading: false,\n              userSignUp: true\n            };\n          }\n\n        case AuthActionTypes.LOGOUT_USER:\n          {\n            return { ...state,\n              user: null,\n              loading: false,\n              userLogout: true,\n              userLoggedIn: false\n            };\n          }\n\n        case AuthActionTypes.FORGOT_PASSWORD:\n          {\n            return { ...state,\n              resetPasswordSuccess: action.payload.data,\n              loading: false,\n              passwordReset: true\n            };\n          }\n\n        default:\n          return { ...state\n          };\n      }\n\n    case AuthActionTypes.API_RESPONSE_ERROR:\n      switch (action.payload.actionType) {\n        case AuthActionTypes.LOGIN_USER:\n          {\n            return { ...state,\n              error: action.payload.error,\n              userLoggedIn: false,\n              loading: false\n            };\n          }\n\n        case AuthActionTypes.SIGNUP_USER:\n          {\n            return { ...state,\n              registerError: action.payload.error,\n              userSignUp: false,\n              loading: false\n            };\n          }\n\n        case AuthActionTypes.FORGOT_PASSWORD:\n          {\n            return { ...state,\n              error: action.payload.error,\n              loading: false,\n              passwordReset: false\n            };\n          }\n\n        default:\n          return { ...state\n          };\n      }\n\n    case AuthActionTypes.LOGIN_USER:\n      return { ...state,\n        loading: true,\n        userLoggedIn: false\n      };\n\n    case AuthActionTypes.LOGOUT_USER:\n      return { ...state,\n        loading: true,\n        userLogout: false\n      };\n\n    case AuthActionTypes.RESET:\n      return { ...state,\n        loading: false,\n        error: false,\n        userSignUp: false,\n        userLoggedIn: false,\n        passwordReset: false,\n        passwordChange: false,\n        resetPasswordSuccess: null\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = Auth;\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["D:/workspace/flying-assess/flyingcarpet-shared-inbox/src/redux/auth/reducers.ts"],"names":["APICore","AuthActionTypes","api","INIT_STATE","user","getLoggedInUser","loading","Auth","state","action","type","API_RESPONSE_SUCCESS","payload","actionType","LOGIN_USER","data","userLoggedIn","SIGNUP_USER","userSignUp","LOGOUT_USER","userLogout","FORGOT_PASSWORD","resetPasswordSuccess","passwordReset","API_RESPONSE_ERROR","error","registerError","RESET","passwordChange"],"mappings":"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","sourcesContent":["// apicore\r\nimport { APICore } from '../../helpers/api/apiCore';\r\n\r\n// constants\r\nimport { AuthActionTypes } from './constants';\r\n\r\nconst api = new APICore();\r\n\r\nconst INIT_STATE = {\r\n    user: api.getLoggedInUser(),\r\n    loading: false,\r\n};\r\n\r\ninterface UserData {\r\n    id: number;\r\n    email: string;\r\n    username: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    role: string;\r\n    token: string;\r\n}\r\n\r\ninterface AuthActionType {\r\n    type:\r\n        | AuthActionTypes.API_RESPONSE_SUCCESS\r\n        | AuthActionTypes.API_RESPONSE_ERROR\r\n        | AuthActionTypes.LOGIN_USER\r\n        | AuthActionTypes.LOGOUT_USER\r\n        | AuthActionTypes.RESET;\r\n    payload: {\r\n        actionType?: string;\r\n        data?: UserData | {};\r\n        error?: string;\r\n    };\r\n}\r\n\r\ninterface State {\r\n    user?: UserData | {};\r\n    loading?: boolean;\r\n    value?: boolean;\r\n}\r\n\r\nconst Auth = (state: State = INIT_STATE, action: AuthActionType): any => {\r\n    switch (action.type) {\r\n        case AuthActionTypes.API_RESPONSE_SUCCESS:\r\n            switch (action.payload.actionType) {\r\n                case AuthActionTypes.LOGIN_USER: {\r\n                    return {\r\n                        ...state,\r\n                        user: action.payload.data,\r\n                        userLoggedIn: true,\r\n                        loading: false,\r\n                    };\r\n                }\r\n                case AuthActionTypes.SIGNUP_USER: {\r\n                    return {\r\n                        ...state,\r\n                        loading: false,\r\n                        userSignUp: true,\r\n                    };\r\n                }\r\n                case AuthActionTypes.LOGOUT_USER: {\r\n                    return {\r\n                        ...state,\r\n                        user: null,\r\n                        loading: false,\r\n                        userLogout: true,\r\n                        userLoggedIn: false,\r\n\r\n                    };\r\n                }\r\n                case AuthActionTypes.FORGOT_PASSWORD: {\r\n                    return {\r\n                        ...state,\r\n                        resetPasswordSuccess: action.payload.data,\r\n                        loading: false,\r\n                        passwordReset: true,\r\n                    };\r\n                }\r\n                default:\r\n                    return { ...state };\r\n            }\r\n\r\n        case AuthActionTypes.API_RESPONSE_ERROR:\r\n            switch (action.payload.actionType) {\r\n                case AuthActionTypes.LOGIN_USER: {\r\n                    return {\r\n                        ...state,\r\n                        error: action.payload.error,\r\n                        userLoggedIn: false,\r\n                        loading: false,\r\n                    };\r\n                }\r\n                case AuthActionTypes.SIGNUP_USER: {\r\n                    return {\r\n                        ...state,\r\n                        registerError: action.payload.error,\r\n                        userSignUp: false,\r\n                        loading: false,\r\n                    };\r\n                }\r\n                case AuthActionTypes.FORGOT_PASSWORD: {\r\n                    return {\r\n                        ...state,\r\n                        error: action.payload.error,\r\n                        loading: false,\r\n                        passwordReset: false,\r\n                    };\r\n                }\r\n                default:\r\n                    return { ...state };\r\n            }\r\n\r\n        case AuthActionTypes.LOGIN_USER:\r\n            return { ...state, loading: true, userLoggedIn: false };\r\n        case AuthActionTypes.LOGOUT_USER:\r\n            return { ...state, loading: true, userLogout: false };\r\n        case AuthActionTypes.RESET:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: false,\r\n                userSignUp: false,\r\n                userLoggedIn: false,\r\n                passwordReset: false,\r\n                passwordChange: false,\r\n                resetPasswordSuccess: null,\r\n            };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nexport default Auth;\r\n"]},"metadata":{},"sourceType":"module"}